<%- stopText %>

# tymly-data-types

> A library of data types often found in digital services.

## <a name="install"></a>Install
```bash
$ npm install @wmfs/tymly-data-types --save
```

## Reference

**The full list of data-types currently defined by *tymly-data-types* is shown below.**

* The chances are you'll never need to use all these in any one scenario (that's where [domains](#domains) and [categories](#categories) can help narrow things down).

| Name | Title       | Category | Domain(s) |
| ---- | ----------- | -------- | --------- |
<% dataTypes.forEach(function(dataType){ -%>
| `<%= dataType.name %>` | <%= dataType.title %> | `<%= dataType.category %>` | `<%- prettyEnum(dataType.domains) %>` |
<% }); %>


## Domains

Data items are grouped into specialist *domains*, this helps narrow lists of data-items to just those suitable to the problem domain(s) being addressed:

* A single data-type can feature in multiple domains.
* Note the `general` domain is considered the "default". Without any explicit configuration (i.e. no specialist domains are provided via options), the various methods in the **tymly-data-types** API will return data items to just those within the `general` domain.

| Domain Name | Title       |
| ----------- | ----------- |
<% domains.forEach(function(domain){ -%>
| `<%= domain.name %>` | <%= domain.title %> |
<% }); %>

## Categories

As well as being grouped into one-or-more problem domains, each data-type is also assigned to a more functional *category*:

| Category Name | Title       |
| ------------- | ----------- |
<% categories.forEach(function(category){ -%>
| `<%= category.name %>` | <%= category.title %> |
<% }); %>

## API

### `getDomains(options)`

**Use the `getDomains()` method to get an array of available domains.**

#### Options

Supply `options` as an object with the following keys (note all of this is optional):

| Key | Description |
| --- | ----------- |
| `filterString` | If provided will help filter domains to just those matching the supplied string. |
| `sort` | Controls the order of that the domains will be returned. A string of either `seq` (**default**) or  `name`. |

### `getCategories(options)`

Use the `getCategories()` method to grab a list of categories.

#### Options

Supply `options` as an object with the following keys (note all of this is optional):

| Key | Description |
| --- | ----------- |
| `filterString` | If provided will help filter categories to just those matching the supplied string. |
| `sort` | Controls the order of that the categories will be returned. A string of either `seq` (**default**) or  `name`. |
| `domainRestriction`| An array of strings denoting zero-or-more domain names. Only categories with one or more data-items in *any* of these domains will be returned. If no `domainRestriction` array is provided, then any categories used by data-items in just the `general` domain will be returned. |

### getDataTypes(options)

The main event, get a list of data-items as restricted by an object of optional options:

| Key    | Description |
| ------ | ----------- |
| `filterString` | If provided will help filter data-items to just those matching the supplied string. |
| `domainRestriction` | Only data-types belonging to any of the domains provided will be returned. Use just as described in the `getCategories()` method. If omitted, will be restricted to data-types in the `general` domain.|
| `category` | An optional string. Only data-types belonging to the supplied category name will be returned. |
| `sort` | Controls the order of that the data items will be returned. A string of either `seq` (**default**) or  `name`. |

* This method returns an array of zero-or-more `dataType` objects. Take a look [here](https://github.com/wmfs/tymly-data-types) to see the type of thing returned.

## <a name="test"></a>Testing

```bash
$ npm test
```

## <a name="license"></a>License
[MIT](https://github.com/wmfs/tymly-data-types/blob/master/LICENSE)
